#!/usr/bin/env node

const HOME = require('os').homedir();

const AuthServer = require('../auth');
const Hyperzone = require('../index');
const Replicator = require('@hyperswarm/replicator');
const ram = require('random-access-memory');
const { util } = require('bns');
const base32 = require('bs32');

if (process.argv.indexOf('--authoritative')) {
  const key = process.argv[2]
  try {
    base32.decode(key)
  } catch (err) {
    throw new Error('First argument must be a base32 encoded public key')
  }
  console.log('public key:', key)

  const storageIndex = process.argv.indexOf('--storage')
  let storage 
  if (storageIndex >= 0) { 
    storage = process.argv[1 + storageIndex]
  } else {
    storage = (process.argv.indexOf('--ram') >= 0) ? ram : `${HOME}/.hyperzones/r/${key}`;
  }
  console.log(`storage: ${storage}`)

  const hostnameIndex = process.argv.indexOf('--hostname')
  const hostname = hostnameIndex >= 0 ? process.argv[1 + hostnameIndex] : '127.0.0.1'

  const portIndex = process.argv.indexOf('--port')
  const port = portIndex >= 0 ? process.argv[1 + portIndex] : 5300

  const server = new AuthServer({
    tcp: true,
    edns: true,
    dnssec: true
  });

  console.log('searching for zone...')
  server.setZone(storage, key).then(async (zone) => {
    const origin = await zone.origin()
    console.log('found zone:', origin)

    server.on('error', console.error)

    if (process.argv.indexOf('--log') >= 0) {
      server.on('log', console.log)
    }

    server.bind(port, hostname);
    console.log(`listening on ${hostname}:${port}`);
  });

  
  return
}

const origin = util.fqdn(((process.argv[2] !== '--ram' && process.argv[2]) ? process.argv[2] : null) || 'example');
const secretKey = (process.argv[3] && process.argv[3].length > 4) ? Buffer.from(process.argv[3], 'hex') : undefined;
const publicKey = secretKey ? secretKey.slice(32) : undefined;
const storage = (process.argv[2] === '--ram' || process.argv[3] === '--ram') ? ram : `${HOME}/.hyperzones/w/${origin}`;

main();

async function main () {
  const replicator = new Replicator();
  const zone = new Hyperzone(storage, publicKey, { origin, secretKey });
  await zone.ready();

  const _origin = await zone.origin();
  console.log('origin:', _origin);
  console.log('public key (base32):', zone.pub);
  console.log('public key (hex):', zone.db.key.toString('hex'));
  console.log('storage:', storage === ram ? 'in-memory' : storage);
  console.log('\n---\n');
  console.log(`; ${_origin.split('.').slice(1).join('.')}\n`);
  console.log(`${(await zone.DS()).toString()}`);
  console.log(`${_origin} 86400 IN NS ${zone.pub}.hyperzone.`);

  replicator.add(zone.db.feed, { server: true, client: true });
  replicator.on('connection', () => console.log('%')); // todo: dont disrupt interactive session

  console.log('\n---\n');
  console.log(`; ${_origin}`);
  let prev = '';
  zone.db.createReadStream()
    .on('data', ({ key, value: record }) => {
      const curr = key.split('/').slice(0, 2).join('/');
      if (key !== 'ORIGIN') {
        if (curr !== prev) {
          prev = curr;
          console.log(`\n; ${curr}\n`);
        }
        console.log(record.toString());
      }
    })
    .on('end', async () => {
      console.log('---');
      console.log('> put/del:\n');
      process.stdin.on('data', async data => {
        data = data.toString();
        if (data.slice(0, 5) === 'query') {
          const [name, type] = data.slice(5).trim().split(' ');
          const res = await zone.resolve(util.fqdn(name), type || 'A');
          console.log(res.toString());
        } else if (data.slice(0, 3) === 'del') {
          if (!data.slice(3).trim()) return;
          try {
            const recordSetKey = data.slice(3).trim().toUpperCase();
            const batchDel = await zone.del(recordSetKey);
            const delRecords = batchDel.map(({ key }) => key);
            console.log('> del', recordSetKey, JSON.stringify(delRecords, undefined, 2));
          } catch (error) {
            console.error('> del ERROR:', error.type);
          }
          console.log();
        } else if (data.slice(0, 3) === 'get') {
          try {
            const key = data.slice(3).trim().toUpperCase();
            const batchGet = await zone.get(key);
            const getRecords = batchGet.map(({ key, value }) => ({ key, record: value.toString() }));
            console.log('> get', key, JSON.stringify(getRecords, undefined, 2));
          } catch (error) {
            console.error('> get ERROR:', error.type);
          }
          console.log();
        } else {
          const record = data.slice(0, 3) === 'put' ? data.slice(3).trim() : data;
          try {
            const recordSetKey = await zone.put(record.trim());
            const batchPut = await zone.get(recordSetKey);
            const putRecords = batchPut.map(({ key, value }) => ({ key, record: value.toString() }));
            console.log('> put', recordSetKey, JSON.stringify(putRecords, undefined, 2));
          } catch (error) {
            console.error('> put ERROR:', error.type);
          }
          console.log();
        }
      });
    });
}
